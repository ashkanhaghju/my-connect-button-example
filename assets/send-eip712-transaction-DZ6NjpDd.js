import{e as F}from"./eth_sendRawTransaction-DPdnXbFR.js";import{u as G,B as l,D as P,a2 as E,i as c,e as B,d as L,ag as v,a6 as d,a5 as _,cp as z}from"./index-BUbiDIUQ.js";import{concatHex as D}from"./concat-hex-DX_SPP17.js";import{a as M,s as S,t as A}from"./sha256-0_ecNwaH.js";function f(t){if(["string","number"].includes(typeof t)&&!Number.isInteger(Number(t)))throw new Error(`Expected value to be an integer to convert to a bigint, got ${t} of type ${typeof t}`);return t instanceof Uint8Array?BigInt(G(t)):BigInt(t)}const x=(t,e)=>typeof t=="bigint"?e(t):Array.isArray(t)?t.map(a=>x(a,e)):t&&typeof t=="object"?Object.fromEntries(Object.entries(t).map(([a,n])=>[a,x(n,e)])):t,b=M*32n;class $ extends l{constructor({givenLength:e,maxBytecodeSize:a}){super(`Bytecode cannot be longer than ${a} bytes. Given length: ${e}`,{name:"BytecodeLengthExceedsMaxSizeError"})}}class H extends l{constructor({givenLengthInWords:e}){super(`Bytecode length in 32-byte words must be odd. Given length in words: ${e}`,{name:"BytecodeLengthInWordsMustBeOddError"})}}class O extends l{constructor({givenLength:e}){super(`The bytecode length in bytes must be divisible by 32. Given length: ${e}`,{name:"BytecodeLengthMustBeDivisibleBy32Error"})}}function W(t){const e=P(t);if(e.length%32!==0)throw new O({givenLength:e.length});if(e.length>b)throw new $({givenLength:e.length,maxBytecodeSize:b});const a=S(e),n=P(a),r=e.length/32;if(r%2===0)throw new H({givenLengthInWords:r});const i=P(r),s=E(i,{size:2}),o=new Uint8Array([1,0]);return n.set(o,0),n.set(s,2),n}const I=50000n,k=t=>{const e=R(t);return{domain:{name:"zkSync",version:"2",chainId:t.chainId},types:{Transaction:[{name:"txType",type:"uint256"},{name:"from",type:"uint256"},{name:"to",type:"uint256"},{name:"gasLimit",type:"uint256"},{name:"gasPerPubdataByteLimit",type:"uint256"},{name:"maxFeePerGas",type:"uint256"},{name:"maxPriorityFeePerGas",type:"uint256"},{name:"paymaster",type:"uint256"},{name:"nonce",type:"uint256"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"factoryDeps",type:"bytes32[]"},{name:"paymasterInput",type:"bytes"}]},primaryType:"Transaction",message:e}};function R(t){const{gas:e,nonce:a,to:n,from:r,value:i,maxFeePerGas:s,maxPriorityFeePerGas:o,paymaster:m,paymasterInput:y,gasPerPubdata:u,data:g,factoryDeps:p}=t;return{txType:113n,from:BigInt(r),to:n?BigInt(n):0n,gasLimit:e??0n,gasPerPubdataByteLimit:u??I,maxFeePerGas:s??0n,maxPriorityFeePerGas:o??0n,paymaster:m?BigInt(m):0n,nonce:a?BigInt(a):0n,value:i??0n,data:g||"0x0",factoryDeps:(p==null?void 0:p.map(h=>c(W(h))))??[],paymasterInput:y||"0x"}}async function X(t){const{account:e,transaction:a}=t,n=await N(t),r=await U({account:e,eip712Transaction:n,chainId:a.chain.id}),i=B(a);return{transactionHash:await F(i,r),chain:a.chain,client:a.client}}async function U(t){const{account:e,eip712Transaction:a,chainId:n}=t,r=k(a),i=await e.signTypedData({...r});return V({...a,chainId:n,customSignature:i})}async function N(t){const{account:e,transaction:a}=t,{gas:n,maxFeePerGas:r,maxPriorityFeePerGas:i,gasPerPubdata:s}=await C({transaction:a,from:L(e.address)});return{...await v({transaction:{...a,gas:n,maxFeePerGas:r,maxPriorityFeePerGas:i},from:e.address}),...a.eip712,gasPerPubdata:s,from:e.address}}function V(t){const{chainId:e,gas:a,nonce:n,to:r,from:i,value:s,maxFeePerGas:o,maxPriorityFeePerGas:m,customSignature:y,factoryDeps:u,paymaster:g,paymasterInput:p,gasPerPubdata:h,data:w}=t,T=[n?c(n):"0x",m?c(m):"0x",o?c(o):"0x",a?c(a):"0x",r??"0x",s?c(s):"0x",w??"0x0",c(e),c(""),c(""),c(e),i??"0x",h?c(h):c(I),u??[],y??"0x",g&&p?[g,p]:[]];return D(["0x71",A(T)])}async function C(t){const{transaction:e,from:a}=t;let[n,r,i,s]=await Promise.all([d(e.gas),d(e.maxFeePerGas),d(e.maxPriorityFeePerGas),d(e.eip712)]),o=s==null?void 0:s.gasPerPubdata;if(!n||!r||!i){const m=B(e),y=await Z({transaction:e,from:a}),u=await m({method:"zks_estimateFee",params:[x(y,c)]});n=f(u.gas_limit)*2n,r=f(u.max_fee_per_gas)*2n,i=f(u.max_priority_fee_per_gas)||1n,o=f(u.gas_per_pubdata_limit)*2n,o<50000n&&(o=50000n)}return{gas:n,maxFeePerGas:r,maxPriorityFeePerGas:i,gasPerPubdata:o}}async function Z(t){var m;const{transaction:e,from:a}=t,[n,r,i,s]=await Promise.all([_(e),d(e.to),d(e.value),d(e.eip712)]),o=s==null?void 0:s.gasPerPubdata;return{from:a,to:r,data:n,value:i,gasPerPubdata:o,eip712Meta:{...s,gasPerPubdata:o||50000n,factoryDeps:(m=s==null?void 0:s.factoryDeps)==null?void 0:m.map(y=>Array.from(z(y)))},type:"0x71"}}export{C as getZkGasFees,N as populateEip712Transaction,X as sendEip712Transaction,U as signEip712Transaction};
